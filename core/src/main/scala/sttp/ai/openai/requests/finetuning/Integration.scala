package sttp.openai.requests.finetuning

import sttp.openai.json.SnakePickle

/** @param `type`
  *   The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.
  * @param wandb
  *   The settings for your integration with Weights and Biases. This payload specifies the project that metrics will be sent to.
  *   Optionally, you can set an explicit display name for your run, add tags to your run, and set a default entity (team, username, etc) to
  *   be associated with your run.
  */
case class Integration(
    `type`: Type,
    wandb: Wandb
)

object Integration {
  implicit val integrationRW: SnakePickle.ReadWriter[Integration] = SnakePickle.macroRW[Integration]

  case object Wandb extends Type("wandb")

  private val values: Set[Type] = Set(Wandb)

  private val byTypeValue = values.map(`type` => `type`.value -> `type`).toMap

  implicit val typeRW: SnakePickle.ReadWriter[Type] = Type.typeRW(byTypeValue)
}

/** @param project
  *   The name of the project that the new run will be created under.
  * @param name
  *   A display name to set for the run. If not set, we will use the Job ID as the name.
  * @param entity
  *   The entity to use for the run. This allows you to set the team or username of the WandB user that you would like associated with the
  *   run. If not set, the default entity for the registered WandB API key is used.
  * @param tags
  *   A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some default tags are
  *   generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".
  */
case class Wandb(
    project: String,
    name: Option[String] = None,
    entity: Option[String] = None,
    tags: Option[Seq[String]]
)

object Wandb {
  implicit val wandbRW: SnakePickle.ReadWriter[Wandb] = SnakePickle.macroRW[Wandb]
}
