package sttp.openai.requests.claude

import sttp.openai.json.SnakePickle
import sttp.openai.requests.claude.ClaudeRequestBody.StopReason
import sttp.openai.requests.completions.Usage

object ClaudeResponseData {

  /** Claude API content block in response
    *
    * @param `type`
    *   The type of content block (always "text" for text responses)
    * @param text
    *   The text content
    */
  case class ContentBlock(
      `type`: String,
      text: String
  )

  object ContentBlock {
    implicit val contentBlockR: SnakePickle.Reader[ContentBlock] = SnakePickle.macroR[ContentBlock]
  }

  /** Claude API message response
    *
    * @param id
    *   Unique object identifier
    * @param `type`
    *   Object type, always "message"
    * @param role
    *   Conversational role (always "assistant" for Claude responses)
    * @param content
    *   Content blocks generated by the model
    * @param model
    *   The model that handled the request
    * @param stopReason
    *   The reason that we stopped
    * @param stopSequence
    *   Which custom stop sequence was generated, if any
    * @param usage
    *   Billing and rate-limit usage
    */
  case class ClaudeMessageResponse(
      id: String,
      `type`: String = "message",
      role: String = "assistant",
      content: Seq[ContentBlock],
      model: String,
      stopReason: Option[StopReason],
      stopSequence: Option[String],
      usage: Usage
  )

  object ClaudeMessageResponse {
    implicit val claudeMessageResponseR: SnakePickle.Reader[ClaudeMessageResponse] = SnakePickle.macroR[ClaudeMessageResponse]
  }
}