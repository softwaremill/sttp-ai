package sttp.openai.requests.images.creation

import sttp.openai.json.SnakePickle
import sttp.openai.requests.images.{ResponseFormat, Size}

object ImageCreationRequestBody {

  /** @param prompt
    *   A text description of the desired image(s). The maximum length is 32000 characters for `gpt-image-1`, 1000 characters for `dall-e-2`
    *   and 4000 characters for `dall-e-3`.
    * @param background
    *   Allows to set transparency for the background of the generated image(s). This parameter is only supported for `gpt-image-1`. Must be
    *   one of `transparent`, `opaque` or `auto` (default value). When `auto` is used, the model will automatically determine the best
    *   background for the image. If `transparent`, the output format needs to support transparency, so it should be set to either `png`
    *   (default value) or `webp`.
    * @param model
    *   The model to use for image generation. One of `dall-e-2`, `dall-e-3`, or `gpt-image-1`. Defaults to `dall-e-2` unless a parameter
    *   specific to `gpt-image-1` is used.
    * @param moderation
    *   Control the content-moderation level for images generated by `gpt-image-1`. Must be either `low` for less restrictive filtering or
    *   `auto` (default value).
    * @param n
    *   The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
    * @param outputCompression
    *   The compression level (0-100%) for the generated images. This parameter is only supported for `gpt-image-1` with the `webp` or
    *   `jpeg` output formats, and defaults to 100.
    * @param outputFormat
    *   The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`,
    *   `jpeg`, or `webp`.
    * @param partialImages
    *   The number of partial images to generate. This parameter is used for streaming responses that return partial images. Value must be
    *   between 0 and 3. When set to 0, the response will be a single image sent in one streaming event. Note that the final image may be
    *   sent before the full number of partial images are generated if the full image is generated more quickly.
    * @param quality
    *   The quality of the image that will be generated. `auto` (default value) will automatically select the best quality for the given
    *   model. `high`, `medium` and `low` are supported for `gpt-image-1`. `hd` and `standard` are supported for `dall-e-3`. `standard` is
    *   the only option for `dall-e-2`.
    * @param size
    *   The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default
    *   value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or
    *   `1024x1792` for `dall-e-3`.
    * @param responseFormat
    *   The format in which generated images with `dall-e-2` and `dall-e-3` are returned. Must be one of `url` or `b64_json`. URLs are only
    *   valid for 60 minutes after the image has been generated. This parameter isn't supported for `gpt-image-1` which will always return
    *   base64-encoded images.
    * @param stream
    *   Whether to stream the response. Must be one of `true` or `false`. This parameter is only supported for `gpt-image-1`.
    * @param style
    *   The style of the generated images. This parameter is only supported for `dall-e-3`. Must be one of `vivid` or `natural`. `vivid`
    *   causes the model to lean towards generating hyper-real and dramatic images. `natural` causes the model to produce more natural, less
    *   hyper-real looking images.
    * @param user
    *   A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
    */
  case class ImageCreationBody(
      prompt: String,
      background: Option[String] = None,
      model: String,
      moderation: Option[String] = None,
      n: Option[Int] = None,
      outputCompression: Option[Int] = None,
      outputFormat: Option[String] = None,
      partialImages: Option[Int] = None,
      quality: Option[String] = None,
      size: Option[Size] = None,
      responseFormat: Option[ResponseFormat] = None,
      stream: Option[Boolean] = None,
      style: Option[String] = None,
      user: Option[String] = None
  )

  object ImageCreationBody {
    implicit val imageCreationBodyW: SnakePickle.Writer[ImageCreationBody] = SnakePickle.macroW[ImageCreationBody]
  }

}
